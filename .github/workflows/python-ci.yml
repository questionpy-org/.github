name: "CI"

on:
  workflow_call:
    inputs:
      pytest-python-versions:
        # GitHub workflow inputs do not support lists, so we expect a JSON string.
        type: string
        required: true
      packages:
        type: string
        description: Space-separated list of packages, including tests.

env:
  POETRY_VIRTUALENVS_IN_PROJECT: true

jobs:
  pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJSON(inputs.pytest-python-versions) }}
    steps:
      - uses: actions/checkout@v4
      - # setup-python's poetry caching requires poetry to be installed, so we install it before python.
        name: Install poetry
        run: pip install "poetry>=1.1.14,<2.0.0"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Install dependencies
        run: poetry install --no-interaction --only main,dev,test
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - run: python --version

      - name: Get commit
        uses: pr-mpt/actions-commit-hash@v3
        id: commit

      - name: Run pytest
        run: |
          coverage run -m pytest --md pytest-report.md
          coverage xml
          coverage html -d ./html_report --title='${{ steps.commit.outputs.short }}'

      - name: Generate coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Append coverage report
        run: |
          printf "\n## Coverage Report\n\n" >> pytest-report.md
          cat code-coverage-results.md >> pytest-report.md

      - name: Create job summary
        if: always()
        run: cat pytest-report.md > "$GITHUB_STEP_SUMMARY"

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage_report_${{ matrix.python-version }}
          path: html_report

  ruff-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pip install "poetry>=1.1.14,<2.0.0"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ fromJSON(inputs.pytest-python-versions)[0] }}
          cache: poetry

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --only linter
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - run: python --version

      - name: Run ruff format --check
        run: ruff format --check

  ruff-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pip install "poetry>=1.1.14,<2.0.0"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ fromJSON(inputs.pytest-python-versions)[0] }}
          cache: poetry

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --only linter
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - run: python --version

      - name: Run ruff check
        run: ruff check --output-format=github

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pip install "poetry>=1.1.14,<2.0.0"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ fromJSON(inputs.pytest-python-versions)[0] }}
          cache: poetry

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --only main,dev,test,type-checker
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - run: python --version

      - name: Run mypy
        run: mypy ${{ inputs.packages }}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pip install "poetry>=1.1.14,<2.0.0"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ fromJSON(inputs.pytest-python-versions)[0] }}
          cache: poetry

      - name: Install dependencies
        run: poetry install --no-interaction
      - run: python --version

      - name: Build
        run: poetry build --no-interaction

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
