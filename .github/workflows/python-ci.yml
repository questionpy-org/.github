name: "CI"

on:
  workflow_call:
    inputs:
      packages:
        type: string
        required: true
        description: Space-seperated list of source packages, not including tests, which are always assumed to be in
          'tests'.

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Run pytest
        run: |
          coverage run -m pytest --md pytest-report.md
          coverage xml

      - name: Generate coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Append coverage report
        run: |
          printf "\n## Coverage Report\n\n" >> pytest-report.md
          cat code-coverage-results.md >> pytest-report.md

      - name: Create job summary
        if: always()
        run: cat pytest-report.md > "$GITHUB_STEP_SUMMARY"

      - uses: jwalton/gh-find-current-pr@v1
        if: always()
        id: find_pr

      - name: Comment on open PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: always() && steps.find_pr.outputs.number
        with:
          number: ${{ steps.find_pr.outputs.number }}
          path: pytest-report.md

  pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Run pylint
        run: pylint ${{ inputs.packages }} tests

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Run mypy
        run: mypy ${{ inputs.packages }} tests

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Run flake8
        run: flake8 ${{ inputs.packages }} tests

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Build
        run: poetry build -n

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: dist

  pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - name: Get commit
        uses: pr-mpt/actions-commit-hash@v2
        id: commit
      - name: Generate coverage report
        run: |
          coverage run -m pytest 
          coverage html -d ./html_report/questionpy_${GITHUB_REF##*/} --title=${{steps.commit.outputs.short}}
      - name: Get remote branches
        run: |
          git branch --format='%(refname:lstrip=3)' -r > html_report/branches.txt
      - name: Sparse Checkout questionpy/.github/githubpages
        #TODO: on merge, change branch name to pull from
        #source: https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository/52269934#52269934
        run: |
          cd html_report/
          git init
          git remote add -f origin https://github.com/questionpy-org/.github.git
          git config core.sparseCheckout true
          echo "/githubpages" >> .git/info/sparse-checkout
          git pull origin feature/github-pages 
          cp ./githubpages/* ./
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: './html_report/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1