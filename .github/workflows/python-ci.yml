name: "CI"

on:
  workflow_call:
    inputs:
      pytest-python-versions:
        # GitHub workflow inputs do not support lists, so we expect a JSON string.
        type: string
        required: true

jobs:
  pytest:
    strategy:
      matrix:
        python-version: ${{ fromJSON(inputs.pytest-python-versions) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Get commit
        uses: pr-mpt/actions-commit-hash@v2
        id: commit

      - name: Run pytest
        run: |
          # We tell tox to run envs with the factor "pytest", tox-gh-actions narrows down the python version for us.
          tox -f pytest -- --md pytest-report.md
          coverage xml
          coverage html -d ./html_report --title=${{steps.commit.outputs.short}}

      - name: Generate coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Append coverage report
        run: |
          printf "\n## Coverage Report\n\n" >> pytest-report.md
          cat code-coverage-results.md >> pytest-report.md

      - name: Create job summary
        if: always()
        run: cat pytest-report.md > "$GITHUB_STEP_SUMMARY"

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage_report
          path: html_report

  pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ fromJSON(inputs.pytest-python-versions)[0] }}
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Run pylint
        run: tox -f pylint

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ fromJSON(inputs.pytest-python-versions)[0] }}
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Run mypy
        run: tox -f mypy

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ fromJSON(inputs.pytest-python-versions)[0] }}
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Run flake8
        run: tox -f flake8

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install "poetry>=1.1.14,<2.0.0"
          poetry config -n virtualenvs.in-project true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ fromJSON(inputs.pytest-python-versions)[0] }}
          cache: poetry
      - name: Install dependencies
        run: poetry install -n
      - name: Activate virtualenv
        run: |
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Build
        run: poetry build -n

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist
